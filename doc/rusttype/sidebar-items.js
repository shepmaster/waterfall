initSidebarItems({"enum":[["CodepointOrGlyphId","Represents either a Unicode code point, or a glyph identifier for a font."],["Segment","Part of a `Contour`, either a `Line` or a `Curve`."]],"fn":[["point","A convenience function for generating `Point`s."],["vector","A convenience function for generating `Vector`s."]],"struct":[["Bytes","A newtype wrapper for `Cow<[u8]>` that can be targetted by `From` and `Into`. This is intended to be used for providing convenient APIs that can accept `Vec<u8>`s or `&[u8]`s or other types that can be read as `[u8]`s (feel free to provide your own `From` implementations)."],["Codepoint","Represents a Unicode code point."],["Contour","A closed loop consisting of a sequence of `Segment`s."],["Curve","A quadratic Bezier curve, starting at `p[0]`, ending at `p[2]`, with control point `p[1]`."],["Font","A single font. This may or may not own the font data."],["FontCollection","A collection of fonts read straight from a font file's data. The data in the collection is not validated. This structure may or may not own the font data."],["Glyph","A single glyph of a font. this may either be a thin wrapper referring to the font and the glyph id, or it may be a standalone glyph that owns the data needed by it."],["GlyphId","Represents a glyph identifier for a particular font. This identifier will not necessarily correspond to the correct glyph in a font other than the one that it was obtained from."],["GlyphIter",""],["HMetrics","The \"horizontal metrics\" of a glyph. This is useful for calculating the horizontal offset of a glyph from the previous one in a string when laying a string out horizontally."],["LayoutIter",""],["Line","A straight line between two points, `p[0]` and `p[1]`"],["Pixels","A uniform font scaling that makes the height of the rendered font a specific number of pixels. For example, if you want to render a font with a height of 20 pixels, use `Pixels(20.0)`."],["PixelsXY","A nonuniform font scaling. `PixelsXY(x, y)` produces a scaling that makes the height of the rendered font `y` pixels high, with a horizontal scale factor on top of that of `x/y`. For example, if you want to render a font with a height of 20 pixels, but have it horizontally stretched by a factor of two, use `PixelsXY(40.0, 20.0)`."],["Point","A point in 2-dimensional space, with each dimension of type `N`."],["PositionedGlyph","A glyph augmented with positioning and scaling information. You can query such a glyph for information that depends on the scale and position of the glyph."],["Rect","A rectangle, with top-left corner at `min`, and bottom-right corner at `max`."],["Scale","An opaque struct representing a common format for font scaling. You typically won't use this struct directly, instead using `Pixels` or `PixelsXY` and the `Into` trait to pass them to functions."],["SizedGlyph","A glyph augmented with scaling information. You can query such a glyph for information that depends on the scale of the glyph."],["VMetrics","The \"vertical metrics\" of a font at a particular scale. This is useful for calculating the amount of vertical space to give a line of text, and for computing the vertical offset between successive lines."],["Vector","A vector in 2-dimensional space, with each dimension of type `N`."]]});